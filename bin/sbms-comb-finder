#! /usr/bin/python
from matplotlib import use
use('agg')
import pymultinest
from sbms.engine import engine
from sbms.marginals import marginals
from sbms.io_sbms import read_ini
import json
import optparse
import numpy as np
from jinja2 import Environment, PackageLoader
"""
This is an example script that runs the analysis 3 times:
        We inject a broken power law each time and we recover it
        using a broken power law recovery, a power law recovery,
        and a noise model recovery.
        This script is meant to be run on the Caltech computing cluster, where
        the example files live in a home directory.
THIS SCRIPT IS A WORKING EXAMPLE.
"""


def parse_command_line():
    """
    parse command line
    """
    parser = optparse.OptionParser()
    parser.add_option("--output-directory", "-o",
        help="output prefix. path needs to exist right now.",
        default='./',
        dest="output_dir", type=str)
    params, args = parser.parse_args()
    return params


if __name__=="__main__":
    params = parse_command_line()
    output_pref_comb = params.output_dir + 'comb_'
    output_pref_noise = params.output_dir + 'noise_'
    injection_file = 'examples/use_real_data.ini'

    #example files directory
    # edit this to fit your own needs
    exdir = '/home/meyers/git_repos/sgwb_model_selection'

    seed = 12345
    # get evidences
    # run things
    print 'Running comb recovery'
    print 'Results here: %s' % output_pref_comb
    engine(injection_file,'examples/recovery_comb.ini',output_pref_comb, noise_seed=seed)
    print 'Running noise recovery'
    print 'Results here: %s' % output_pref_noise
    engine(injection_file,'noise',output_pref_noise, noise_seed=seed)
    print 'Done running Multinest'
    print 'Collecting output'
    marginals(output_pref_comb, read_ini('examples/recovery_comb.ini'))

    comb_evidence = pymultinest.Analyzer(n_params = 3, outputfiles_basename = output_pref_comb).get_stats()['global evidence']
    noise_evidence = json.load(open(output_pref_noise + 'stats.json'))['global evidence']

    print 'Comb evidence'
    print comb_evidence

    print 'Noise law evidence'
    print noise_evidence

    print 'log Bayes Factor of comb to noise: '
    print (comb_evidence - noise_evidence)

    print 'DONE!'
    results = {}
    results['comb'] = {'evidence' : comb_evidence, 'marg' : output_pref_comb + 'marg.png', 'name':'Comb Law'}
    results['noise'] = {'evidence' : noise_evidence, 'marg' : output_pref_noise + 'marg.png', 'name':'Noise'}
    results['Injection'] = {'evidence' : noise_evidence, 'marg' : output_pref_noise + 'marg.png', 'name':'Noise'}
    env = Environment(loader=PackageLoader('sbms','templates'))
    template = env.get_template('summary.html')
    f1 = open(params.output_dir + '/summary.html', 'w')
    print >>f1, template.render(results=results)
    f1.close()

